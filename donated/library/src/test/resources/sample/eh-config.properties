# use -Dconfig.properties=eh-config.properties to point to this file.

# Here we define the possible scopes a project's configuration might have, from narrow to broader.
# We also define a list of properties source that maybe available in each scope.

# should runtime exceptions be thrown in the case of any configuration sources cannot be loaded,
# or other catastrophic event?  If false we will simply log a warning message.
failOnError = false

# available scopes are global, environment, cluster, host, server, and system, with system being -D properties
# comma separated, order is important since narrower scope overrides broader scope properties
# Do not specify system here, system property will always override all other.
scope.order=server,cluster,environment,global

# These are the prefixes.  The actual names are something like dc1-umsg01, wlserver-umsg-01, etc
#scope.global.prefix = global
#scope.environment.prefix = environment
#scope.cluster.prefix = cluster
#scope.host.prefix = host
#scope.server.prefix = server

enable.reload = true
# reload interval in milliseconds.  Refresh will occur if >interval time has lapsed since last refresh.
reload.interval = 60000
reload.class = com.eharmony.configuration.DoNothingConfigReloader
#reload.class = com.eharmony.configuration.reloader.weblogic.WLConfigReloader
# If use WLConfigReloader, need to specify work.manager.name.  This is the jndi name to look up 
# the WorkManager defined in WebLogic.
work.manager.name = wm/ConfigWorkManager

# Possible configuration sources at each scope.  They all will be combined into a single map of sorts.
# config.order is the load order for each configuration source.  Later loaded properties will override 
# earlier loaded properties.
# 
# Confguration file name will be default to names here if not specified for each configuration source.
# Default format is Properties.
# Default location is a blank string for Classpath type or "/" for FileSystem type, if none is specified
# Default type is Classpath.
# The testFile property specifies a file/directory that must exist for reloading to take effect.
# If it is specified but could not be found (e.g., in the rare case when we loose NFS), the whole configuration
# reloading process will be skipped, the old configuration will be kept intact.  This is an optional property 
# and only applies to FileSystem based config sources.
config.order=umessage,umessage-xml,overrides

config.umessage.type=Classpath
config.umessage.location=sample
# Properties should be the default.
config.umessage.format=Properties

config.overrides.type=FileSystem
config.overrides.location=/data/deployment/umessage/config
config.overrides.name=umessage

# xml property files (Java 5)
config.umessage-xml.type=Classpath
config.umessage-xml.location=/sample
config.umessage-xml.format=XML
config.umessage-xml.name=umessage

